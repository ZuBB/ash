<?xml version="1.0" encoding="UTF-8"?>
<project name="ash">
    <description>
        Autoscope Script Helper is a...
    </description>

    <property file="core/build/build.core.properties"/>
    <property file="build/build.smtp.properties"/>

    <target name="dev" depends="concat, replace, encoding">
        <var name="old.file" value="${new.file}"/>
        <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.dev.${FILE.EXT}"/>

        <copy encoding="${current.cp}" outputencoding="${current.cp}"
            file="${old.file}" tofile="${new.file}"/>
    </target>

    <target name="test-sources" depends="concat, replace, strip">
        <exec executable="jshint">
            <arg value="--config"/>
            <arg value="${JSHINTRF.FILE}"/>
            <arg value="${new.file}"/>
        </exec>
    </target>

    <target name="rqbuild" depends="vcs, dev, strip, check-log-calls, compress">
        <var name="old.file" value="${new.file}"/>

        <if>
            <equals arg1="git-present" arg2="true"/>
            <then>
                <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.release.${BUILD_ID}.${FILE.EXT}"/>
            </then>
            <else>
                <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.release.${FILE.EXT}"/>
            </else>
        </if>

        <copy encoding="${current.cp}" outputencoding="${current.cp}"
            file="${old.file}" tofile="${new.file}"/>
    </target>

    <target name="send" depends="check-mail-deps, get-mail-deps" unless="${new.file}">
        <mail
            from="${MAIL.FROM}"
            tolist="${mail.to}"
            cclist="${mail.cc}"
            bcclist="${mail.bcc}"
            subject="${subject}"
            mailhost="${SMTP.HOST}" mailport="${SMTP.PORT}" ssl="${SMTP.SSL}"
            user="${SMTP.USER}" password="${SMTP.PSWD}"
            files="${new.file}">
            <message>${om}${EMAIL_SIGNATURE}</message>
        </mail>
    </target>

    <target name="concat" depends="vars, i18n">
        <mkdir dir="${OUTPUT.DIR}"/>
        <delete verbose="false" quiet="true">
            <fileset dir="${OUTPUT.DIR}" includes="*"/>
        </delete>

        <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.concat.${FILE.EXT}"/>

        <concat destfile="${new.file}" fixlastline="true"
            encoding="${INT_CP}" outputencoding="${INT_CP}">
            <header>${JSHINT.HEADER}${line.separator}${line.separator}</header>

            <fileset dir="javascript">
                <filename name="definitions.js"/>
            </fileset>
            <fileset dir="core/src/core" includes="*.js"/>
            <fileset dir="core/src/third party/json">
                <selector if="3PARTY.JSON">
                    <filename name="json2.js"/>
                </selector>
            </fileset>
            <fileset dir="core/src/third party/es5-shim">
                <selector if="3PARTY.ES5">
                    <filename name="es5-shim.js"/>
                </selector>
            </fileset>
            <fileset dir="core/src/extension" includes="*.js"/>
            <fileset dir="build/tmp" includes="lang*.js"/>
            <fileset dir="tasks">
                <and>
                    <selector>
                        <filename name="*.js"/>
                    </selector>
                    <selector refid="excludes.list" />
                </and>
            </fileset>
            <fileset dir="javascript">
                <include name="*.js"/>
                <exclude name="definitions.js"/>
            </fileset>
        </concat>
    </target>

    <target name="i18n" depends="check-props2js, get-props2js">
        <mkdir dir="./build/tmp/storage"/>

        <for param="file">
            <fileset dir="resources">
                <include name="lang-*.properties"/>
                <different targetdir='./build/tmp/storage' />
            </fileset>
            <sequential>
                <propertyregex override="yes" input="@{file}"
                    regexp="-([a-z]{2})." property="LANG" select="\1"/>

                <propertyregex override="yes" input="@{file}"
                    regexp="\.(\d+)\." property="LANG_CODE" select="\1"/>

                <!--
                    here we converting localization file that is in
                    java properties file into json
                    all trick is done by this lib
                    https://github.com/nzakas/props2js
                -->
                <exec executable="java">
                    <arg value="-jar"/>
                    <arg value="${LIB.DIR}/props2js-0.1.0.jar"/>
                    <arg value="@{file}"/>
                    <arg value="-t"/>
                    <arg value="json"/>
                    <arg value="-o"/>
                    <arg value="./build/tmp/lang.${LANG}.body.txt"/>
                </exec>

                <concat destfile="./build/tmp/lang.${LANG}.js" fixlastline="true"
                    encoding="${INT_CP}" outputencoding="${INT_CP}">
                        <fileset dir="./build/tmp/">
                            <include name="lang.${LANG}.body.txt"/>
                        </fileset>
                        <header>${I18N_HEADER}${LANG_CODE},</header>
                        <footer>);</footer>
                </concat>
            </sequential>
        </for>

        <copy todir='./build/tmp/storage'>
            <fileset dir="resources">
                <include name="lang-*.properties"/>
                <different targetdir='./build/tmp/storage'
                    ignoreFileTimes='true' ignoreContents='false'/>
            </fileset>
        </copy>
    </target>

    <target name="replace">
        <var name="old.file" value="${new.file}"/>
        <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.replace.${FILE.EXT}"/>
        <var name="current.cp" value="${INT_CP}"/>

        <copy encoding="${current.cp}" outputencoding="${current.cp}"
            file="${old.file}" tofile="${new.file}">
                <filterset begintoken="@" endtoken="@"
                    filtersfile="resources/colors.properties"/>
        </copy>

        <tstamp>
            <format property="TIMESTAMP" pattern="yyyy, M, d, H, m, s, S"/>
        </tstamp>

        <replace file="${new.file}" encoding="${current.cp}"
            token="TIMESTAMP" value="${TIMESTAMP}">
        </replace>

        <replace file="${new.file}" encoding="${current.cp}"
            token="VERSION" value="${VERSION}">
        </replace>

        <replace file="${new.file}" encoding="${current.cp}"
            token="BUILD_ID" value="${BUILD_ID}">
        </replace>

        <replace file="${new.file}" encoding="${current.cp}"
            token="SCRIPT_FILENAME" value="${FILE.NAME}">
        </replace>

        <replace file="${new.file}" encoding="${current.cp}"
            token="GRAPHIC_TYPE" value="${DEFAULT_GRAPHIC_TYPE}">
        </replace>
    </target>

    <target name="encoding">
        <var name="old.file" value="${new.file}"/>
        <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.encoding.${FILE.EXT}"/>

        <copy encoding="${INT_CP}" outputencoding="${EXT_CP}"
            file="${old.file}" tofile="${new.file}"/>

        <var name="current.cp" value="${EXT_CP}"/>
    </target>

    <target name="strip">
        <var name="old.file" value="${new.file}"/>
        <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.strip.${FILE.EXT}"/>

        <copy encoding="${current.cp}" outputencoding="${current.cp}"
            file="${old.file}" tofile="${new.file}"/>

        <replaceregexp file="${new.file}" encoding="${current.cp}"
            flags="gs" match="\/\/DEBUG_START.*?\/\/DEBUG_STOP" replace="">
        </replaceregexp>
    </target>

    <target name="check-log-calls">
        <loadfile property="LOG_CALLS" srcfile="${new.file}">
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="^[^\/]*_(d|i|p|w|e|f)\("/>
                </linecontainsregexp>
            </filterchain>
        </loadfile>

        <fail message="Found next log calls in ${new.file}${line.separator}${LOG_CALLS}">
            <condition>
                <and>
                    <isset property="LOG_CALLS"/>
                    <not>
                        <equals arg1="${LOG_CALLS}" arg2=""/>
                    </not>
                </and>
            </condition>
        </fail>
    </target>

    <target name="compress" depends="check-closure-compiler, get-closure-compiler">
        <taskdef name="jscomp" classpath="${LIB.DIR}/compiler.jar"
            classname="com.google.javascript.jscomp.ant.CompileTask"/>

        <var name="old.file" value="${new.file}"/>
        <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.strip.${FILE.EXT}"/>

        <copy encoding="${current.cp}" outputencoding="${current.cp}"
            file="${old.file}" tofile="${new.file}"/>

        <jscomp compilationLevel="simple" output="${new.file}"
            encoding="${current.cp}" outputencoding="${current.cp}" debug="false">

            <externs dir="./">
                <file name="${CCEXTERN.FILE}"/>
            </externs>

            <sources dir="./">
                <file name="${old.file}"/>
            </sources>
        </jscomp>
    </target>

    <target name="uib" depends="vcs, dev" if="git-present">
        <var name="old.file" value="${new.file}"/>
        <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.dev.${BUILD_ID}.${FILE.EXT}"/>

        <copy encoding="${current.cp}" outputencoding="${current.cp}"
            file="${old.file}" tofile="${new.file}"/>
    </target>

    <target name="vcs" depends="vars" if="git-present">
        <exec executable="git" outputproperty="BRANCH">
            <arg value="rev-parse"/>
            <arg value="--abbrev-ref"/>
            <arg value="HEAD"/>
        </exec>

        <exec executable="git" outputproperty="CHANGESETS">
            <arg value="rev-list"/>
            <arg value="--count"/>
            <arg value="HEAD"/>
        </exec>

        <property name="BUILD_ID" value="${BRANCH}-${CHANGESETS}"/>

        <if>
            <equals arg1="${releasing}" arg2="true"/>
            <then>
                <exec executable="git" outputproperty="VERSION">
                    <arg value="describe"/>
                    <arg value="--abbrev=0"/>
                    <arg value="--tags"/>
                </exec>

                <exec executable="git" outputproperty="MODIFIED">
                    <arg value="status"/>
                    <arg value="--porcelain"/>
                    <arg value="-uno"/>
                </exec>
            </then>
        </if>
    </target>

    <target name="vars" depends="check-antcontrib, get-antcontrib">
        <fail message="'FILE.NAME' variable is not set">
            <condition>
                <not>
                    <isset property="FILE.NAME"/>
                </not>
            </condition>
        </fail>

        <taskdef resource="net/sf/antcontrib/antlib.xml"
            classpathref="antcontrib.path"/>

        <var name="new.file" value=""/>
        <var name="old.file" value=""/>
        <var name="current.cp" value=""/>
        <var name="MAIL.TO"  value=""/>
        <var name="MAIL.CC"  value=""/>
        <var name="MAIL.BCC" value=""/>

        <if>
            <or>
                <contains string="${ant.project.invoked-targets}" substring="rqbuild"/>
                <equals arg1="${ant.project.invoked-targets}" arg2="sr2vlad"/>
                <equals arg1="${ant.project.invoked-targets}" arg2="2host"/>
            </or>
            <then>
                <property name="releasing" value="true"/>
            </then>
        </if>

        <if>
            <isset property="releasing"/>
            <then>
                <property name="DEFAULT_GRAPHIC_TYPE" value="${DEV.GRAPHIC.TYPE}"/>
            </then>
            <else>
                <property name="DEFAULT_GRAPHIC_TYPE" value="${REL.GRAPHIC.TYPE}"/>
            </else>
        </if>
    </target>

    <selector id="excludes.list">
        <not>
            <selector if="releasing"></selector>
        </not>
    </selector>

    <path id="antcontrib.path">
        <fileset dir="${user.home}/.ant/lib/">
            <include name="ant-contrib*.jar"/>
        </fileset>
    </path>

    <target name="get-antcontrib" unless="${antcontrib}">
        <get verbose="false"
            src="http://goo.gl/ftYh6n" dest="${java.io.tmpdir}/"/>

        <unzip src="${java.io.tmpdir}/ftYh6n" dest="${user.home}/.ant/lib/">
            <patternset>
                <include name="**/ant-contrib*.jar"/>
            </patternset>
            <mapper type="flatten"/>
        </unzip>
    </target>

    <target name="check-antcontrib">
        <mkdir dir="${user.home}/.ant/lib/"/>
        <available property="antcontrib"
            resource="net/sf/antcontrib/antlib.xml"
            classpathref="antcontrib.path"/>
    </target>

    <target name="get-props2js" unless="${props2js}">
        <mkdir dir="${LIB.DIR}"/>

        <get verbose="false" src="http://db.tt/bJoLen6l"
            dest="${LIB.DIR}/props2js-0.1.0.jar"/>
    </target>

    <target name="check-props2js">
        <available property="props2js" file="${LIB.DIR}/props2js-0.1.0.jar"/>
    </target>

    <target name="get-closure-compiler" unless="${closure.compiler}">
        <mkdir dir="${LIB.DIR}"/>

        <get verbose="false" dest="${java.io.tmpdir}/"
            src="http://dl.google.com/closure-compiler/compiler-latest.zip"/>

        <unzip src="${java.io.tmpdir}/compiler-latest.zip" dest="${LIB.DIR}">
            <patternset>
                <include name="compiler.jar"/>
            </patternset>
        </unzip>
    </target>

    <target name="check-closure-compiler">
        <available property="closure.compiler" file="${LIB.DIR}/compiler.jar"/>
    </target>

    <target name="check-git-presence">
        <!-- http://goo.gl/4T3uHi -->
        <property environment="env" />
        <condition property="git-present">
            <or>
                <available file="git" filepath="${env.PATH}" />
                <!-- special case for Windows, may be PATH or Path -->
                <available file="git.exe" filepath="${env.Path}" />
                <available file="git.exe" filepath="${env.PATH}" />
            </or>
        </condition>
    </target>

    <target name="get-mail-deps" unless="${mail.deps}">
        <mkdir dir="${LIB.DIR}"/>

        <mkdir dir="${user.home}/.ant/lib/"/>
        <get verbose="false" dest="${user.home}/.ant/lib/"
            src="http://download.java.net/maven/1/javax.activation/jars/activation-1.1.1.jar"/>

        <get verbose="false" dest="${user.home}/.ant/lib/"
            src="https://maven.java.net/content/repositories/releases/com/sun/mail/javax.mail/1.5.0/javax.mail-1.5.0.jar"/>
    </target>

    <target name="check-mail-deps">
        <condition property="mail.deps">
            <and>
                <available file="${user.home}/.ant/lib/activation-1.1.1.jar"/>
                <available file="${user.home}/.ant/lib/javax.mail-1.5.0.jar"/>
            </and>
        </condition>
    </target>
</project>

