<?xml version="1.0" encoding="UTF-8"?>
<project name="ash">
    <description>
        Autoscope Script Helper is a...
    </description>

    <property file="src/core/build/build.core.properties"/>

    <target name="base" depends="concat, replace, encoding">
        <var name="old.file" value="${new.file}"/>
        <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.base.${FILE.EXT}"/>

        <copy encoding="${current.cp}" outputencoding="${current.cp}"
            file="${old.file}" tofile="${new.file}"/>
    </target>

    <target name="dev" depends="base, tstamp">
        <var name="old.file" value="${new.file}"/>
        <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.dev.${FILE.EXT}"/>

        <copy encoding="${current.cp}" outputencoding="${current.cp}"
            file="${old.file}" tofile="${new.file}"/>
    </target>

    <target name="release" depends="rqbuild-vars, vcs, base, strip, check-log-calls, compress, unminify">
        <var name="old.file" value="${new.file}"/>

        <if>
            <equals arg1="${git-present}" arg2="true"/>
            <then>
                <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.release.${BUILD_ID}.${FILE.EXT}"/>
            </then>
            <else>
                <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.release.${FILE.EXT}"/>
            </else>
        </if>

        <copy encoding="${current.cp}" outputencoding="${current.cp}"
            file="${old.file}" tofile="${new.file}"/>
    </target>

    <target name="rqbuild" depends="release, tstamp" />

    <target name="concat" depends="vars, i18n">
        <mkdir dir="${OUTPUT.DIR}"/>
        <delete verbose="false" quiet="true">
            <fileset dir="${OUTPUT.DIR}" includes="*"/>
        </delete>

        <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.concat.${FILE.EXT}"/>

        <concat destfile="${new.file}" fixlastline="true"
            encoding="${current.cp}" outputencoding="${current.cp}">
            <header>${JSHINT.HEADER}${line.separator}${line.separator}</header>

            <fileset dir="src/core/src/core" includes="*js" excludes="main.js"/>
            <fileset dir="src/core/src/vendor/json">
                <selector if="${3PARTY.JSON}">
                    <filename name="json2.js"/>
                </selector>
            </fileset>
            <fileset dir="src/core/src/vendor/es5-shim">
                <selector if="${3PARTY.ES5}">
                    <filename name="es5-shim.js"/>
                </selector>
            </fileset>
            <fileset dir="src/core/src/extension" includes="*.js"/>

            <filelist dir="src/modules" files="${modules.files}"/>

            <fileset dir="build/tmp" includes="lang*.js"/>
            <fileset dir="src/tasks">
                <and>
                    <selector>
                        <filename name="*.js"/>
                    </selector>
                    <selector>
                        <not>
                            <selector if="${releasing}" refid="excludes.list" />
                        </not>
                    </selector>
                </and>
            </fileset>
            <fileset dir="src/app" includes="*.js"/>
            <fileset file="src/core/src/core/main.js"/>
        </concat>
    </target>

    <target name="i18n" depends="check-props2js, get-props2js">
        <mkdir dir="./build/tmp/i18n-reference"/>
        <mkdir dir="./build/tmp/i18n-storage"/>

        <for param="file" keepgoing="true">
            <fileset dir="src/resources" includes="lang-*.properties"/>
            <sequential>
                <propertyregex override="yes" input="@{file}"
                    regexp="-([a-z]{2})." property="LANG" select="\1"/>

                <propertyregex override="yes" input="@{file}"
                    regexp="\.(\d+)\." property="LANG_CODE" select="\1"/>

                <var name="curr.file" value="lang-${LANG}.${LANG_CODE}.properties"/>
                <concat encoding="${current.cp}" outputencoding="${current.cp}"
                    destfile="./build/tmp/i18n-storage/${curr.file}">
                    <filelist dir='./'>
                        <file name="./src/core/src/resources/${curr.file}"/>
                        <file name="./src/resources/${curr.file}"/>
                    </filelist>
                    <fileset dir="./src/modules/" erroronmissingdir="false">
                        <patternset>
                            <include name="**/${curr.file}"/>
                        </patternset>
                    </fileset>
                </concat>

                <if>
                    <not>
                        <filesmatch
                            file1="./build/tmp/i18n-storage/${curr.file}"
                            file2="./build/tmp/i18n-reference/${curr.file}"/>
                    </not>
                    <then>
                        <!--
                            here we converting localization file that is in
                            java properties file into json
                            all trick is done by this lib
                            https://github.com/nzakas/props2js
                        -->
                        <exec executable="java">
                            <arg value="-jar"/>
                            <arg value="${LIB.DIR}/props2js-0.1.0.jar"/>
                            <arg value="./build/tmp/i18n-storage/${curr.file}"/>
                            <arg value="-t"/>
                            <arg value="json"/>
                            <arg value="-o"/>
                            <arg value="./build/tmp/lang.${LANG}.body.txt"/>
                        </exec>

                        <concat destfile="./build/tmp/lang.${LANG}.js" fixlastline="true"
                            encoding="${current.cp}" outputencoding="${current.cp}">
                                <fileset dir="./build/tmp/">
                                    <include name="lang.${LANG}.body.txt"/>
                                </fileset>
                                <header>${I18N_HEADER}${LANG_CODE},</header>
                                <footer>);</footer>
                        </concat>

                        <copy file="./build/tmp/i18n-storage/${curr.file}"
                            tofile="./build/tmp/i18n-reference/${curr.file}">
                        </copy>
                    </then>
                </if>
            </sequential>
        </for>
    </target>

    <target name="replace">
        <var name="old.file" value="${new.file}"/>
        <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.replace.${FILE.EXT}"/>

        <copy file="${old.file}" tofile="${new.file}"
            encoding="${current.cp}" outputencoding="${current.cp}">
            <filterset filtersfile="src/resources/colors.properties" />
            <filterchain>
                <replacetokens begintoken='$' endtoken='$'>
                    <token key="VERSION" value="${VERSION}"/>
                    <token key="BUILD_ID" value="${BUILD_ID}"/>
                    <token key="SCRIPT" value="${FILE.NAME}"/>
                    <token key="GRAPHIC_TYPE" value="${DEFAULT_GRAPHIC_TYPE}"/>
                    <token key="DATATYPE" value="${DATATYPE}"/>
                    <token key="DEMO_MODE" value="${DEMO_MODE}"/>
                    <token key="DUMP_TASKS_DATA" value="${DUMP_TASKS_DATA}"/>
                </replacetokens>
            </filterchain>
        </copy>
    </target>

    <target name="encoding">
        <var name="old.file" value="${new.file}"/>
        <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.encoding.${FILE.EXT}"/>

        <copy encoding="${current.cp}" outputencoding="${EXT_CP}"
            file="${old.file}" tofile="${new.file}"/>

        <var name="current.cp" value="${EXT_CP}"/>
    </target>

    <target name="tstamp">
        <var name="old.file" value="${new.file}"/>
        <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.tstamp.${FILE.EXT}"/>

        <tstamp>
            <format property="TIMESTAMP" pattern="yyyy, M, d, H, m, s, S"/>
        </tstamp>

        <move file="${old.file}" tofile="${new.file}"
            encoding="${current.cp}" outputencoding="${current.cp}">
            <filterchain>
                <replacetokens begintoken='"' endtoken='"'>
                    <token key="TIMESTAMP" value="${TIMESTAMP}"/>
                </replacetokens>
            </filterchain>
        </move>

        <move file="${new.file}" tofile="${old.file}"
            encoding="${current.cp}" outputencoding="${current.cp}"/>

        <var name="new.file" value="${old.file}"/>
    </target>

    <target name="strip" unless="${CLOSURE.DEBUG}">
        <var name="old.file" value="${new.file}"/>
        <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.strip.${FILE.EXT}"/>

        <copy encoding="${current.cp}" outputencoding="${current.cp}"
            file="${old.file}" tofile="${new.file}"/>

        <replaceregexp file="${new.file}" encoding="${current.cp}"
            flags="gs" match="\/\/DEBUG_START.*?\/\/DEBUG_STOP" replace="">
        </replaceregexp>
    </target>

    <target name="check-log-calls" unless="${CLOSURE.DEBUG}">
        <loadfile property="LOG_CALLS" srcfile="${new.file}">
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="^[^\/]*_(d|i|p|w|e|f)\("/>
                </linecontainsregexp>
            </filterchain>
        </loadfile>

        <fail message="Found next log calls in ${new.file}${line.separator}${LOG_CALLS}">
            <condition>
                <and>
                    <isset property="LOG_CALLS"/>
                    <not>
                        <equals arg1="${LOG_CALLS}" arg2=""/>
                    </not>
                </and>
            </condition>
        </fail>
    </target>

    <target name="compress" depends="check-closure-compiler, get-closure-compiler">
        <taskdef name="jscomp" classpath="${LIB.DIR}/compiler.jar"
            classname="com.google.javascript.jscomp.ant.CompileTask"/>

        <var name="old.file" value="${new.file}"/>
        <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.compress.${FILE.EXT}"/>

        <copy encoding="${current.cp}" outputencoding="${current.cp}"
            file="${old.file}" tofile="${new.file}"/>

        <jscomp compilationLevel="${COMPRESS.LEVEL}" output="${new.file}"
            forceRecompile="true" debug="false"
            encoding="${current.cp}" outputencoding="${current.cp}">

            <externs dir="./">
                <file name="${CCEXTERN.FILE}"/>
            </externs>

            <sources dir="./">
                <file name="${old.file}"/>
            </sources>
        </jscomp>
    </target>

    <target name="unminify" if="${CLOSURE.DEBUG}">
        <var name="old.file" value="${new.file}"/>
        <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.unminify.${FILE.EXT}"/>

        <exec executable="js-beautify">
            <arg value="-q"/>
            <arg value="-f"/>
            <arg value="${old.file}"/>
            <arg value="-o"/>
            <arg value="${new.file}"/>
        </exec>
    </target>

    <target name="uib" depends="vcs, dev" if="${git-present}">
        <var name="old.file" value="${new.file}"/>
        <var name="new.file" value="${OUTPUT.DIR}/${FILE.NAME}.dev.${BUILD_ID}.${FILE.EXT}"/>

        <copy encoding="${current.cp}" outputencoding="${current.cp}"
            file="${old.file}" tofile="${new.file}"/>
    </target>

    <target name="vcs" depends="vars, check-git-presence" if="${git-present}">
        <exec executable="git" outputproperty="BRANCH">
            <arg value="rev-parse"/>
            <arg value="--abbrev-ref"/>
            <arg value="HEAD"/>
        </exec>

        <exec executable="git" outputproperty="CHANGESETS">
            <arg value="rev-list"/>
            <arg value="--count"/>
            <arg value="HEAD"/>
        </exec>

        <property name="BUILD_ID" value="${BRANCH}-${CHANGESETS}"/>

        <if>
            <equals arg1="${releasing}" arg2="true"/>
            <then>
                <exec executable="git" outputproperty="VERSION">
                    <arg value="describe"/>
                    <arg value="--abbrev=0"/>
                    <arg value="--tags"/>
                </exec>

                <exec executable="git" outputproperty="MODIFIED">
                    <arg value="status"/>
                    <arg value="--porcelain"/>
                    <arg value="-uno"/>
                </exec>
            </then>
        </if>
    </target>

    <target name="antcontrib" depends="check-antcontrib, get-antcontrib">
        <taskdef resource="net/sf/antcontrib/antlib.xml"
            classpathref="antcontrib.path"/>
    </target>

    <target name="modules-dir">
        <condition property="modules.dir.exists">
            <available file="src/modules" type="dir"/>
        </condition>
    </target>

    <target name="modules-no" unless="${modules.dir.exists}">
        <var name="modules.files" value="" />
    </target>

    <target name="modules-yes" if="${modules.dir.exists}">
        <var name="modules.files" value="" />
        <var name="temp.var" value="" />

        <for param="moduleDir">
            <path>
                <dirset dir="src/modules">
                    <include name="*"/>
                </dirset>
            </path>
            <sequential>
                <property file="@{moduleDir}/build.properties"/>

                <propertyregex override="yes" input="@{moduleDir}" select="\1"
                    regexp="\${file.separator}([^\${file.separator}]+)$"
                    property="module" />

                <propertycopy override="true"
                    name="module.include" from="${module}.include" />

                <if>
                    <equals arg1="${module.include}" arg2="true"/>
                    <then>
                        <propertycopy override="true"
                            name="module.list" from="${module}.list" />

                        <for list="${module.list}" delimiter=" " param = "sf">
                            <sequential>
                                <var name="temp.var"
                                    value="${temp.var} ${module}${file.separator}@{sf}" />
                                <var name="modules.files" value="${temp.var}" />
                            </sequential>
                        </for>
                    </then>
                </if>
            </sequential>
        </for>
    </target>

    <target name="get-modules-files-list" depends="modules-dir, modules-no, modules-yes">
    </target>

    <target name="vars" depends="antcontrib, get-modules-files-list">
        <if>
            <not>
                <isset property="FILE.NAME"/>
            </not>
            <then>
                <property name="FILE.NAME" value="${ant.project.name}"/>
            </then>
        </if>

        <fail message="'FILE.NAME' variable is not set">
            <condition>
                <not>
                    <isset property="FILE.NAME"/>
                </not>
            </condition>
        </fail>

        <var name="new.file" value=""/>
        <var name="old.file" value=""/>
        <var name="current.cp" value="${INT_CP}"/>

        <var name="mail.to"  value=""/>
        <var name="mail.cc"  value=""/>
        <var name="mail.bcc" value=""/>
        <var name="mail.subject" value=""/>
        <var name="mail.message" value=""/>

        <property name="3PARTY.JSON" value="${3PARTY.JSON.dev}"/>
        <property name="3PARTY.ES5" value="true"/>
        <property name="DEFAULT_GRAPHIC_TYPE" value="${LINE.TYPE.DEV}"/>

        <if>
            <isset property="om"/>
            <then>
                <var name="mail.message" value="${om}"/>
            </then>
        </if>
    </target>

    <target name="rqbuild-vars">
        <property name="releasing" value="true"/>
        <property name="3PARTY.JSON" value="${3PARTY.JSON.rqb}"/>
        <property name="DEFAULT_GRAPHIC_TYPE" value="${LINE.TYPE.REL}"/>
    </target>

    <selector id="excludes.list"></selector>

    <path id="antcontrib.path">
        <fileset dir="${user.home}/.ant/lib/">
            <include name="ant-contrib*.jar"/>
        </fileset>
    </path>

    <target name="get-antcontrib" unless="${antcontrib}">
        <get verbose="false"
            src="http://goo.gl/ftYh6n" dest="${java.io.tmpdir}/"/>

        <unzip src="${java.io.tmpdir}/ftYh6n" dest="${user.home}/.ant/lib/">
            <patternset>
                <include name="**/ant-contrib*.jar"/>
            </patternset>
            <mapper type="flatten"/>
        </unzip>
    </target>

    <target name="check-antcontrib">
        <mkdir dir="${user.home}/.ant/lib/"/>
        <available property="antcontrib"
            resource="net/sf/antcontrib/antlib.xml"
            classpathref="antcontrib.path"/>
    </target>

    <target name="get-props2js" unless="${props2js}">
        <mkdir dir="${LIB.DIR}"/>

        <get verbose="false" src="http://db.tt/bJoLen6l"
            dest="${LIB.DIR}/props2js-0.1.0.jar"/>
    </target>

    <target name="check-props2js">
        <available property="props2js" file="${LIB.DIR}/props2js-0.1.0.jar"/>
    </target>

    <target name="get-closure-compiler" unless="${closure.compiler}">
        <mkdir dir="${LIB.DIR}"/>

        <get verbose="false" dest="${java.io.tmpdir}/"
            src="http://dl.google.com/closure-compiler/compiler-latest.zip"/>

        <unzip src="${java.io.tmpdir}/compiler-latest.zip" dest="${LIB.DIR}">
            <patternset>
                <include name="compiler.jar"/>
            </patternset>
        </unzip>
    </target>

    <target name="check-closure-compiler">
        <available property="closure.compiler" file="${LIB.DIR}/compiler.jar"/>
    </target>

    <target name="check-git-presence">
        <!-- http://goo.gl/4T3uHi -->
        <property environment="env" />
        <condition property="git-present">
            <or>
                <available file="git" filepath="${env.PATH}" />
                <!-- special case for Windows, may be PATH or Path -->
                <available file="git.exe" filepath="${env.Path}" />
                <available file="git.exe" filepath="${env.PATH}" />
            </or>
        </condition>
    </target>
</project>

